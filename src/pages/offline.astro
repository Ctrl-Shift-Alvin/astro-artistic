---
import { cGetUserLanguage, cSetUserLanguage } from '@/shared/cookies';
import { getTranslation, defaultLanguageCode } from '@/backend/i18n';
import { GlobalTranslation, type ITranslation } from '@/locales/global';
import { defaultAnimationDurationMs } from '@/frontend/windowTools';

import '@/styles/global.css';

const translation: ITranslation = getTranslation(
	cGetUserLanguage(Astro) || defaultLanguageCode
);
if (!translation) {
	if (cGetUserLanguage(Astro) === null) {
		throw new Error('Could not load translations.');
	} else {
		cSetUserLanguage(null);
	}
}
---

<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>{translation.offline.title}</title>
	<meta name="description" content={translation.offline.description} />
	<meta name="author" content={GlobalTranslation.author} />
	<meta name="theme-color" content="#000000" />
	<link rel="stylesheet" href="/offline.css" />

	<link rel="icon" type="image/x-icon" href="/favicon.ico" />

	<script is:inline define:vars={{ translation }}>
		window.__TRANSLATION__ = translation;
	</script>
</head>
<body
	class="flex h-dvh flex-col items-center bg-gradient-to-b from-black via-black to-gray-900 text-gray-100 transition-opacity duration-750 opacity-0 alvins-class"
>

	<script is:inline define:vars={{ animDuration: defaultAnimationDurationMs }}>

		const tryRedirect = async () => {
			
			if (!navigator.onLine)
				return false;

			// Check if the server is also online
			try {

				const result = await fetch('/home/', { cache: 'no-cache' }); // Smallest resource currently
				if (result.ok) {

					// Transition
					document.body.classList.replace('opacity-100', 'opacity-0');
					await new Promise((res) => setTimeout(res, animDuration));

					window.location.href = '/';
					return true;

				} else {

					return false;

				}

			} catch {

				return false;

			}
    };

    (async () => {
			if (!await tryRedirect()) {

				window.addEventListener('online', () => {
					tryRedirect();
				});

				setInterval(
					() => void tryRedirect(),
					5000
				);

				// ReactInit is not present, so play the transition manually
				document.body.classList.add('opacity-100');

			}
    })();
	</script>

	<h1 class="mt-15 w-10/12 text-center text-4xl font-bold">
		{translation.offline.title}
	</h1>
	<p class="newlines mt-3 w-10/12 text-center text-lg">
		{translation.offline.body}
	</p>

	<div
		class="h-sm:hidden fixed bottom-0 w-full max-w-screen-lg border-t border-gray-600 px-3 py-6"
	>
		<p class="text-center">
			Â© Copyright {new Date().getFullYear()}. {GlobalTranslation.siteName}.
		</p>
	</div>
</body>
